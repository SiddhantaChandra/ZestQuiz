// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  username      String
  password      String
  role          Role          @default(USER)
  createdQuizzes Quiz[]       @relation("CreatedBy")
  quizAttempts  QuizAttempt[]
  chatMessages  ChatMessage[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Quiz {
  id            String         @id @default(uuid())
  title         String
  description   String
  tags          String[]
  status        QuizStatus    @default(DRAFT)
  isAIGenerated Boolean       @default(false)
  createdBy     User          @relation("CreatedBy", fields: [creatorId], references: [id])
  creatorId     String
  questions     Question[]
  attempts      QuizAttempt[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

enum QuizStatus {
  DRAFT
  ACTIVE
  INACTIVE
}

model Question {
  id            String       @id @default(uuid())
  quiz          Quiz        @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId        String
  text          String
  orderIndex    Int
  options       Option[]
  userAnswers   UserAnswer[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Option {
  id            String       @id @default(uuid())
  question      Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId    String
  text          String
  isCorrect     Boolean
  orderIndex    Int
  userAnswers   UserAnswer[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model QuizAttempt {
  id            String       @id @default(uuid())
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  quiz          Quiz        @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId        String
  score         Float?
  answers       UserAnswer[]
  chatMessages  ChatMessage[]
  startedAt     DateTime    @default(now())
  submittedAt   DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([userId, quizId])
}

model UserAnswer {
  id            String      @id @default(uuid())
  attempt       QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  attemptId     String
  question      Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId    String
  selectedOption Option     @relation(fields: [optionId], references: [id], onDelete: Cascade)
  optionId      String
  isCorrect     Boolean
  answeredAt    DateTime    @default(now())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model ChatMessage {
  id            String      @id @default(uuid())
  content       String
  isUserMessage Boolean    @default(true)
  user          User       @relation(fields: [userId], references: [id])
  userId        String
  attempt       QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  attemptId     String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([userId])
  @@index([attemptId])
}
